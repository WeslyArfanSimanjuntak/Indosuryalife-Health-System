@model Repository.Application.DataModel.Endorsement
@{
    ViewBag.Title = "Create Endorsment";

    var endorseType = Request.Params["endorseType"];
}

@using (Html.BeginForm("Create", "PolicyEndorsement", null, FormMethod.Post, null))
{
    @Html.AntiForgeryToken()
    <div class="box box-solid">
        <div class="box-header with-border">
            <b class="box-title">@ViewBag.Title</b>
        </div>

        <div class="box-body">
            <div class="col-md-6">

                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.Hidden("EndorseNumber", "temporaryvalue")
                    @*@Html.HiddenFor(model=>model.EndorseType)*@
                    @*<div class="form-group">
                            @Html.Label("", "Endorse No.", new { @class = "control-label col-md-4" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.EndorseNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                                @Html.ValidationMessageFor(model => model.EndorseNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>*@
                    <div class="form-group">
                        @Html.Label("Endorse Type", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.EndorseType, new { htmlAttributes = new { @class = "form-control", @readonly = "true", @value = "Additional" } })
                            @Html.ValidationMessageFor(model => model.EndorseType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Policy No", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <div class="col-md-3" style="padding-left: 0 !important;padding-right: 0 !important;border-right:0">
                                @Html.EditorFor(model => model.PolicyNumber, new { htmlAttributes = new { @readonly = "true", @class = "form-control" } })
                            </div>
                            <div class="col-md-9 no-pad-right" style="padding-left: 0 !important;border-left:0">
                                <div class="input-group col-md-12">
                                    @Html.TextBox("PolicyNumberToDesc", null, htmlAttributes: new { @class = "form-control", @placeholder = "Type 3 characters or more" })
                                    @Html.ValidationMessageFor(model => model.PolicyNumber, "", new { @class = "text-danger" })
                                    <span class="fa fa-search form-control-feedback"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Description", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">

                            @Html.TextAreaFor(model => model.EndorseNotes, new { @class = "form-control", @required = "required" })
                            @Html.ValidationMessageFor(model => model.EndorseNotes, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("", "Endorse Date", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.EndorseDate, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                            @Html.ValidationMessageFor(model => model.EndorseDate, "", new { @class = "text-danger" })
                        </div>
                    </div>




                </div>

            </div>
            <div class="col-md-6">
                <div class="form-horizontal">
                    <div class="form-group">
                        @Html.Label("", "Status", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.EndorseStatus, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.EndorseStatus, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Completed Date", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.CompletedDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.CompletedDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Start Date", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Policy.StartDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Mature Date", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Policy.MatureDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.Label("Last Endorse Date", new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Policy.LastEndorseDate, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-footer">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-8">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
}
<script>
    $(document).ready(function () {
        $('#EndorseDate').datetimepicker({
            format: 'DD/MM/YYYY'
        });


        $("#PolicyNumberToDesc").autocomplete({

        source: function (request, response) {

            var filterEntitasRelateTo = 'PolicyNumber.Contains("' + $("#PolicyNumberToDesc").val() + '") and PolicyStatus == "'+@PolicyStatus.Active+'"';
            $.ajax({
                url: '@Url.Action("GetData", "EntityApi")',
                dataType: "json",
                data: {
                    filter: filterEntitasRelateTo,
                    entitas : "Policy"
                },
                success: function (data) {
                    $("#PolicyNumber").val("");
                    $("#PolicyNumber").change();
                    $("#Policy_StartDate").val("");
                    $("#Policy_StartDate").change();
                    $("#Policy_MatureDate").val("");
                    $("#Policy_MatureDate").change();
                    $("#Policy_LastEndorseDate").val("");
                    $("#Policy_LastEndorseDate").change();

                    response($.map(data["data"], function (item) {
                        //console.log(item.ShortName);
                        return {
                            label: item.PolicyNumber + " - " + item.FullName,
                            value: item.PolicyNumber + " - " + item.FullName,
                            id: item.PolicyNumber,
                            startDate: formJsonDate(item.StartDate),
                            matureDate: formJsonDate(item.MatureDate),
                            lastEndorseDate: formJsonDate(item.LastEndorseDate)
                        };
                    }));
                },
                error: function (xhr, status, error) {
                    alert("Error");
                }
            });
        },
        minLength: 3,
        select: function (event, ui) {
            if (ui.item) {
                $("#PolicyNumber").val(ui.item.id);
                $("#PolicyNumber").change();
                $("#Policy_StartDate").val(ui.item.startDate);
                $("#Policy_StartDate").change();
                $("#Policy_MatureDate").val(ui.item.matureDate);
                $("#Policy_MatureDate").change();
                $("#Policy_LastEndorseDate").val(ui.item.lastEndorseDate);
                $("#Policy_LastEndorseDate").change();

            }
            console.log(ui.item ?
                "Selected: " + ui.item.label :
                "Nothing selected, input was " + this.value);
        },
      open: function () {
            $(this).removeClass("ui-corner-all").addClass("ui-corner-top");
        },
        close: function () {
            $(this).removeClass("ui-corner-top").addClass("ui-corner-all");
        }
    });
    });
</script>
